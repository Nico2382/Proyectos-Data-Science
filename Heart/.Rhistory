text = "TIEMPOS",
xref = "paper",
yref = "paper",
xanchor = "center",
yanchor = "bottom",
showarrow = FALSE
))
#|
#| Crear la grilla de gráficos
subplot(gi6, gi7, gi8, gi9, nrows = 2, margin = 0.08) %>%
layout(showlegend = FALSE, annotations = annotations)
#|
#| crear dataframe con valores de accuracy
#| .
accuracy_df <- data.frame(
Modelo = c("Modelo lmSB", "Modelo lm","Modelo SVMSB","Modelo SVM","Modelo SVM_tun","Modelo rf"),
Accuracy = c(accuracy_lmSB,accuracy_lm,accuracy_SVMSB,accuracy_SVM,accuracy_SVM_tun,accuracy_rf),
PValue = c(pvalue_lmSB,pvalue_lm,pvalue_SVMSB,pvalue_SVM,pvalue_SVM_tun,pvalue_rf),
Kappa = c(kappa_lmSB,kappa_lm,kappa_SVMSB,kappa_SVM,kappa_SVM_tun,kappa_rf),
Sensitivity=c(sens_lmSB,sens_lm,sens_SVMSB,sens_SVM,sens_SVM_tun,sens_rf),
Specificity=c(spec_lmSB,spec_lm,spec_SVMSB,spec_SVM,spec_SVM_tun,spec_rf),
Tiempos = c(round(tiempo_lmSB,4), round(tiempo_lm,4), round(tiempo_svmSB,4),round(tiempo_svm,4),round( tiempo_svm_tun,4),round(tiempo_rf,4))
)
#|
#| Mostrar el data frame
datatable(accuracy_df)
#| busqueda del optimo
mtry_optimo <- as.numeric(modelo_gridsearch$bestTune)
#| trainig grid search
set.seed(123)
split <- createDataPartition(df_bal_max$target, p=0.7, list=FALSE)
datos_train_grid_rf <- df_bal_max[split, ]
datos_test_grid_rf <- df_bal_max[-split, ]
inicio <- Sys.time()
modelo_grid_rf <- randomForest(target ~., datos_train_grid_rf, mtry= min(length(datos_train_grid_rf) - 1,mtry_optimo))
#| .
#| Predecir con set de validacion
prediccion_grid_rf <- predict(modelo_grid_rf, datos_test_grid_rf)
fin <- Sys.time()
tiempo_rf <- fin - inicio
#| .
#| Evaluar resultados
conf_grid_rf <- confusionMatrix(prediccion_grid_rf, datos_test_grid_rf$target)
print(conf_grid_rf)
#|
#| Paralelización para grid search
#| .
num_cores <- 4  # Número deseado de hilos
registerDoParallel(cores = num_cores)
#| .
#| Entrenar el modelo con Grid Search
set.seed(123)
control_grid <- trainControl(method = "cv", number = 5)
grid <- expand.grid(mtry = c(3, 6, 10, 14))
inicio <- Sys.time()
modelo_gridsearch <- train(target~ .,data = df_bal_max,
method = "rf",
tuneGrid = grid,
trControl = control_grid)
fin <- Sys.time()
demora <- fin - inicio
#| .
#| model visualization
modelo_gridsearch
#| busqueda del optimo
mtry_optimo <- as.numeric(modelo_gridsearch$bestTune)
#| trainig grid search
set.seed(123)
split <- createDataPartition(df_bal_max$target, p=0.7, list=FALSE)
datos_train_grid_rf <- df_bal_max[split, ]
datos_test_grid_rf <- df_bal_max[-split, ]
inicio <- Sys.time()
modelo_grid_rf <- randomForest(target ~., datos_train_grid_rf, mtry= min(length(datos_train_grid_rf) - 1,mtry_optimo))
#| .
#| Predecir con set de validacion
prediccion_grid_rf <- predict(modelo_grid_rf, datos_test_grid_rf)
fin <- Sys.time()
tiempo_rf <- fin - inicio
#| .
#| Evaluar resultados
conf_grid_rf <- confusionMatrix(prediccion_grid_rf, datos_test_grid_rf$target)
print(conf_grid_rf)
library(DT)
library(corrplot)
library(plotly)
library(ggplot2)
library(reshape2)
library(caTools)
library(NeuralNetTools)
library(neuralnet)
library(caret)
library(e1071)
library(doParallel)
library(randomForest)
df<-read.csv("heart.csv", header = TRUE, sep = ",")
# leo el data frame
df<-read.csv("heart.csv", header = TRUE, sep = ",")
dfcol_frecuencia<-c("age","trestbps","chol","thalach","oldpeak")
str(df)
sapply(df, function (x) sum(is.na(x)))
#escalo los datos
df_sc = as.data.frame(cbind(df$target, scale(df[ ,c(1:13)])))
# renombro la columna objetivo porque me cambia de nombre el target
names(df_sc)[1] = 'target'
#convierto a factor el target
df_sc$target <- as.factor(df_sc$target)
#balanceo las clases
df_bal_max <- upSample(x = df_sc[, -which(names(df_sc) == 'target')],
y = df_sc$target)
df_bal_max <- as.data.frame(df_bal_max)
# renombro la columna objetivo
names(df_bal_max)[14]<-'target'
str(df_bal_max)
set.seed(123)
inicio <- Sys.time()
index <- createDataPartition(df_sc$target, p=0.7, list=FALSE)
datos_train_lmSB <- df_sc[index, ]
datos_test_lmSB <- df_sc[-index, ]
modelo_lmSB <- caret::train(target~., datos_train_lmSB, method="glm", family=binomial)
fin <- Sys.time()
tiempo_lmSB <- fin - inicio
prediccioneslmSB <- predict(modelo_lmSB, datos_test_lmSB)
conf_matrix_lmSB <- confusionMatrix(prediccioneslmSB,datos_test_lmSB$target)
conf_matrix_lmSB
set.seed(123)
inicio <- Sys.time()
index <- createDataPartition(df_bal_max$target, p=0.7, list=FALSE)
datos_train_lm <- df_bal_max[index, ]
datos_test_lm <- df_bal_max[-index, ]
modelo_log <- caret::train(target~., datos_train_lm, method="glm", family=binomial)
fin <- Sys.time()
tiempo_lm <- fin - inicio
predicciones_lm <- predict(modelo_log, datos_test_lm)
(conf_matrix_lm <- confusionMatrix(predicciones_lm,datos_test_lm$target))
set.seed(123)
inicio <- Sys.time()
index_smv <- createDataPartition(df_sc$target, p=0.7, list=FALSE)
datos_train_smvSB <- df_sc[index, ]
datos_test_smvSB <- df_sc[-index, ]
modelo_svmSB <- svm(target ~., datos_train_smvSB)
fin <- Sys.time()
tiempo_svmSB <- fin - inicio
predicciones_svmSB <- predict(modelo_svmSB, newdata=datos_test_smvSB)
(conf_matrix_svmSB <- confusionMatrix(predicciones_svmSB,datos_test_smvSB$target))
set.seed(123)
inicio <- Sys.time()
index_smv <- createDataPartition(df_bal_max$target, p=0.7, list=FALSE)
datos_train_smv <- df_bal_max[index, ]
datos_test_smv <- df_bal_max[-index, ]
modelo_svm <- svm(target ~., datos_train_smv)
fin <- Sys.time()
tiempo_svm <- fin - inicio
predicciones_svm <- predict(modelo_svm, newdata=datos_test_smv)
(conf_matrix_svm <- confusionMatrix(predicciones_svm,datos_test_smv$target))
num_cores <- 4
registerDoParallel(cores = num_cores)
tune_ctrl <- tune.control(sampling = "cross", cross = 5)
#
set.seed(123)
inicio <- Sys.time()
m.tune <- tune("svm", as.factor(target) ~., data = df_bal_max,
ranges = list(
cost = c(0.001, 0.01, 0.1, 1, 2),
scale=c(TRUE, FALSE),
kernel=c("linear", "polynomial","radial", "sigmoid")),
tunecontrol = tune_ctrl
)
fin <- Sys.time()
tiempo_svm_tun <- fin - inicio
#| Guardamos el modelo tuneado para no tener que generarlo en cada ejecución
#| .
#save(m.tune, file = "tune_svm.RData")
#| Cargamos el modelo ya entrenado para agilizar el tiempo
#| .
#load("tune_svm.RData")
summary(m.tune)
#entreno el modelo con el mejor kernel encontrado
#| trainig SVM tuneado
set.seed(123)
split <- createDataPartition(df_bal_max$target, p=0.8, list=FALSE)
datos_train_svmTUN <- df_bal_max[split, ]
datos_test_svmTUN <- df_bal_max[-split, ]
num_cores <- 4
registerDoParallel(cores = num_cores)
inicio <- Sys.time()
modelo_svmTUN <- svm(target ~., datos_train_svmTUN, kernel="polynomial", cost=2, scale=TRUE)
#| .
#| Predecir con set de validacion
prediccion_svmTUN <- predict(modelo_svmTUN, datos_test_svmTUN)
fin <- Sys.time()
tiempo_svmTUN <- fin - inicio
#| .
#| Evaluar resultados
conf_svmTUN <- confusionMatrix(prediccion_svmTUN, datos_test_svmTUN$target)
print(conf_svmTUN)
#|
#| Paralelización para grid search
#| .
num_cores <- 4  # Número deseado de hilos
registerDoParallel(cores = num_cores)
#| .
#| Entrenar el modelo con Grid Search
set.seed(123)
control_grid <- trainControl(method = "cv", number = 5)
grid <- expand.grid(mtry = c(3, 6, 10, 14))
inicio <- Sys.time()
modelo_gridsearch <- train(target~ .,data = df_bal_max,
method = "rf",
tuneGrid = grid,
trControl = control_grid)
fin <- Sys.time()
demora <- fin - inicio
#| .
#| model visualization
modelo_gridsearch
#| busqueda del optimo
mtry_optimo <- as.numeric(modelo_gridsearch$bestTune)
#| trainig grid search
set.seed(123)
split <- createDataPartition(df_bal_max$target, p=0.7, list=FALSE)
datos_train_grid_rf <- df_bal_max[split, ]
datos_test_grid_rf <- df_bal_max[-split, ]
inicio <- Sys.time()
modelo_grid_rf <- randomForest(target ~., datos_train_grid_rf, mtry= min(length(datos_train_grid_rf) - 1,mtry_optimo))
#| .
#| Predecir con set de validacion
prediccion_grid_rf <- predict(modelo_grid_rf, datos_test_grid_rf)
fin <- Sys.time()
tiempo_rf <- fin - inicio
#| .
#| Evaluar resultados
conf_grid_rf <- confusionMatrix(prediccion_grid_rf, datos_test_grid_rf$target)
print(conf_grid_rf)
#|
#| comparacion de modelos
#| .
#| .
#| Extraer accuracy de cada modelo
accuracy_lmSB<- round(conf_matrix_lmSB$overall['Accuracy'],4)
accuracy_lm  <- round(conf_matrix_lm$overall['Accuracy'],4)
accuracy_SVMSB <- round(conf_matrix_svmSB$overall['Accuracy'],4)
accuracy_SVM <- round(conf_matrix_svm$overall['Accuracy'],4)
accuracy_SVM_tun <- round(conf_svmTUN$overall['Accuracy'],4)
accuracy_rf <- round(conf_grid_rf$overall['Accuracy'],4)
#| .
#| Extraer PValue de cada modelo - mejor que sea un valor muy pequeño
pvalue_lmSB <- round(conf_matrix_lmSB$overall['AccuracyPValue'],4)
pvalue_lm  <- round(conf_matrix_lm$overall['AccuracyPValue'],4)
pvalue_SVMSB <- round(conf_matrix_svmSB$overall['AccuracyPValue'],4)
pvalue_SVM <- round(conf_matrix_svm$overall['AccuracyPValue'],4)
pvalue_SVM_tun <- round(conf_svmTUN$overall['AccuracyPValue'],4)
pvalue_rf <- round(conf_grid_rf$overall['AccuracyPValue'],4)
#| .
#| Extraer Kappa de cada modelo
kappa_lmSB <-  round(conf_matrix_lmSB$overall['Kappa'],4)
kappa_lm  <-  round(conf_matrix_lm$overall['Kappa'],4)
kappa_SVMSB <-  round(conf_matrix_svmSB$overall['Kappa'],4)
kappa_SVM <-  round(conf_matrix_svm$overall['Kappa'],4)
kappa_SVM_tun <-  round(conf_svmTUN$overall['Kappa'],4)
kappa_rf <-  round(conf_grid_rf$overall['Kappa'],4)
#| .
#| Extraer Sensitivity de cada modelo
sens_lmSB <- round(conf_matrix_lmSB$byClass['Sensitivity'],4)
sens_lm <- round(conf_matrix_lm$byClass['Sensitivity'],4)
sens_SVMSB <- round(conf_matrix_svmSB$byClass['Sensitivity'],4)
sens_SVM <- round(conf_matrix_svm$byClass['Sensitivity'],4)
sens_SVM_tun <- round(conf_svmTUN$byClass['Sensitivity'],4)
sens_rf <- round(conf_grid_rf$byClass['Sensitivity'],4)
#| .
#| Extraer Specificity de cada modelo
spec_lmSB <- round(conf_matrix_lmSB$byClass['Specificity'],4)
spec_lm <- round(conf_matrix_lm$byClass['Specificity'],4)
spec_SVMSB <- round(conf_matrix_svmSB$byClass['Specificity'],4)
spec_SVM <- round(conf_matrix_svm$byClass['Specificity'],4)
spec_SVM_tun <- round(conf_svmTUN$byClass['Specificity'],4)
spec_rf<- round(conf_grid_rf$byClass['Specificity'],4)
#|
#| crear dataframe con valores de accuracy
#| .
accuracy_df <- data.frame(
Modelo = c("Modelo lmSB", "Modelo lm","Modelo SVMSB","Modelo SVM","Modelo SVM_tun","Modelo rf"),
Accuracy = c(accuracy_lmSB,accuracy_lm,accuracy_SVMSB,accuracy_SVM,accuracy_SVM_tun,accuracy_rf),
PValue = c(pvalue_lmSB,pvalue_lm,pvalue_SVMSB,pvalue_SVM,pvalue_SVM_tun,pvalue_rf),
Kappa = c(kappa_lmSB,kappa_lm,kappa_SVMSB,kappa_SVM,kappa_SVM_tun,kappa_rf),
Sensitivity=c(sens_lmSB,sens_lm,sens_SVMSB,sens_SVM,sens_SVM_tun,sens_rf),
Specificity=c(spec_lmSB,spec_lm,spec_SVMSB,spec_SVM,spec_SVM_tun,spec_rf),
Tiempos = c(round(tiempo_lmSB,4), round(tiempo_lm,4), round(tiempo_svmSB,4),round(tiempo_svm,4),round( tiempo_svm_tun,4),round(tiempo_rf,4))
)
#|
#| Mostrar el data frame
datatable(accuracy_df)
#|
#| graficar los valores de accuracy
#| .
comp<-ggplot(accuracy_df, aes(x = Modelo, y = Accuracy, fill = Modelo)) +
geom_bar(stat = "identity") +
labs(
x = "Modelos",
y = "Accuracy")+
coord_flip()
gi6 <-ggplotly(comp)
#| .
#| Graficar los valores de Sensitivity
comp<-ggplot(accuracy_df, aes(x = Modelo, y = Sensitivity, fill = Modelo)) +
geom_bar(stat = "identity") +
labs(x = "Modelos",
y = "Sensitivity")+
coord_flip()
gi7 <-ggplotly(comp)
#| .
#| Graficar los valores de Specificity
comp<-ggplot(accuracy_df, aes(x = Modelo, y = Specificity, fill = Modelo)) +
geom_bar(stat = "identity") +
labs(x = "Modelos",
y = "Specificity")+
coord_flip()
gi8 <-ggplotly(comp)
#|
#| Graficar los valores de Tiempos
comp<-ggplot(accuracy_df, aes(x = Modelo, y = Tiempos, fill = Modelo)) +
geom_bar(stat = "identity") +
labs(x = "Modelos",
y = "Tiempos")+
coord_flip()
gi9 <-ggplotly(comp)
# agregar titulos
annotations = list(
list(
x = 0.2,
y = 1.0,
text = "ACCURACY",
xref = "paper",
yref = "paper",
xanchor = "center",
yanchor = "bottom",
showarrow = FALSE
),
list(
x = 0.8,
y = 1,
text = "SENSITIVITY",
xref = "paper",
yref = "paper",
xanchor = "center",
yanchor = "bottom",
showarrow = FALSE
),
list(
x = 0.2,
y = 0.4,
text = "SPECIFICITY",
xref = "paper",
yref = "paper",
xanchor = "center",
yanchor = "bottom",
showarrow = FALSE
),
list(
x = 0.8,
y = 0.4,
text = "TIEMPOS",
xref = "paper",
yref = "paper",
xanchor = "center",
yanchor = "bottom",
showarrow = FALSE
))
#|
#| Crear la grilla de gráficos
subplot(gi6, gi7, gi8, gi9, nrows = 2, margin = 0.08) %>%
layout(showlegend = FALSE, annotations = annotations)
# vamos a predecir con random forest
df_prueba1<-subset(df,
select= c(-target),
subset=target==1)
df_prueba0<-subset(df,
select= c(-target),
subset=target==0)
eval<-df_prueba1[3,]
prediccion_eval <- predict(modelo_grid_rf, eval)
prediccion_eval
#|
#| Paralelización para grid search
#| .
num_cores <- 4  # Número deseado de hilos
registerDoParallel(cores = num_cores)
#| .
#| Entrenar el modelo con Grid Search
set.seed(123)
control_grid <- trainControl(method = "cv", number = 5)
grid <- expand.grid(mtry = c(3, 6, 10, 14))
inicio <- Sys.time()
modelo_gridsearch <- train(target~ .,data = df_bal_max,
method = "rf",
tuneGrid = grid,
trControl = control_grid)
fin <- Sys.time()
demora <- fin - inicio
#| .
#| model visualization
modelo_gridsearch
#| busqueda del optimo
mtry_optimo <- as.numeric(modelo_gridsearch$bestTune)
#| trainig grid search
set.seed(123)
split <- createDataPartition(df_bal_max$target, p=0.7, list=FALSE)
datos_train_grid_rf <- df_bal_max[split, ]
datos_test_grid_rf <- df_bal_max[-split, ]
inicio <- Sys.time()
modelo_grid_rf <- randomForest(target ~., datos_train_grid_rf, mtry= min(length(datos_train_grid_rf) - 1,mtry_optimo))
#| .
#| Predecir con set de validacion
prediccion_grid_rf <- predict(modelo_grid_rf, datos_test_grid_rf)
fin <- Sys.time()
tiempo_rf <- fin - inicio
#| .
#| Evaluar resultados
conf_grid_rf <- confusionMatrix(prediccion_grid_rf, datos_test_grid_rf$target)
print(conf_grid_rf)
View(df_prueba1)
eval<-df_prueba1[1,]
prediccion_eval <- predict(modelo_grid_rf, eval)
prediccion_eval
eval<-df_prueba1[3,]
prediccion_eval <- predict(modelo_grid_rf, eval)
prediccion_eval
eval<-df_prueba1[4,]
prediccion_eval <- predict(modelo_grid_rf, eval)
prediccion_eval
View(df)
library(shiny); runApp('heartapp.R')
runApp('heartapp.R')
vect <- c(56, 1, 1, 120, 236, 0, 1, 178, 0, 0.8, 2, 0, 2)
df_eval <- data.frame(t(vect))
colnames(df_eval) <- c("age", "sex", "cp", "trestbps", "chol", "fbs", "restecg", "thalach", "exang", "oldpeak", "slope", "ca", "thal")
eval<-df_prueba1[4,]
prediccion_eval <- predict(modelo_grid_rf, df_eval)
prediccion_eval
eval<-df_prueba1[4,]
prediccion_eval <- predict(modelo_grid_rf, df_eval)
prediccion_eval
eval<-df_prueba1[4,]
prediccion_eval <- predict(modelo_grid_rf, df_eval)
prediccion_eval
str(prediccion_eval)
str(prediccion_eval)
dim(prediccion_eval)
names(prediccion_eval)
prediccion_eval[1]
prediccion_eval[0]
prediccion_eval[2]
prediccion_eval[1]
prediccion_eval
pre<-as.data.frame(prediccion_eval)
pre
pre<-as.data.frame(prediccion_eval)
dima(pre)
pre<-as.data.frame(prediccion_eval)
dim(pre)
pre<-as.data.frame(prediccion_eval)
pre
pre<-as.vector(prediccion_eval)
pre
eval<-df_prueba0[4,]
prediccion_eval <- predict(modelo_grid_rf, eval)
prediccion_eval
eval<-df_prueba0[4,]
prediccion_eval <- predict(modelo_grid_rf, eval)
prediccion_eval
eval<-df_prueba0[4,]
prediccion_eval <- predict(modelo_grid_rf, eval)
prediccion_eval
# vamos a predecir con random forest
df_prueba1<-subset(df,
select= c(-target),
subset=target==1)
df_prueba0<-subset(df,
select= c(-target),
subset=target==0)
eval<-df_prueba0[4,]
prediccion_eval <- predict(modelo_grid_rf, eval)
prediccion_eval
eval<-df_prueba0[1,]
prediccion_eval <- predict(modelo_grid_rf, eval)
prediccion_eval
eval<-df_prueba0[1,]
prediccion_eval <- predict(modelo_grid_rf, eval)
prediccion_eval
pre<-as.vector(prediccion_eval)
pre
vect <- c(56, 1, 1, 120, 236, 0, 1, 178, 0, 0.8, 2, 0, 2)
df_eval <- data.frame(t(vect))
colnames(df_eval) <- c("age", "sex", "cp", "trestbps", "chol", "fbs", "restecg", "thalach", "exang", "oldpeak", "slope", "ca", "thal")
eval<-df_prueba0[1,]
prediccion_eval <- predict(modelo_grid_rf, df_eval)
prediccion_eval
pre<-as.vector(prediccion_eval)
pre
runApp('heartapp.R')
runApp('heartapp.R')
pre<-as.numeric(prediccion_eval)
pre
eval<-df_prueba0[1,]
prediccion_eval <- predict(modelo_grid_rf, df_eval)
prediccion_eval
str(prediccion_eval)
prediccion_eval[1]
prediccion_eval[2]
prediccion_eval[0]
df_eval
prediccion_eval <- predict(modelo_grid_rf, df_eval)
prediccion_eval
